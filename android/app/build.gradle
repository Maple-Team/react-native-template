apply plugin: "com.android.application"
apply plugin: 'com.google.gms.google-services'

import groovy.json.JsonSlurper

import java.text.SimpleDateFormat

project.ext.react = [
  enableHermes: true,  // clean and rebuild if changing
]

apply from: "../../node_modules/react-native/react.gradle"
//apply plugin: 'com.google.gms.google-services' // apply after this line
//apply plugin: 'com.google.firebase.crashlytics'
/**
 * Set this to true to create two separate APKs instead of one:
 *   - An APK that only works on ARM devices
 *   - An APK that only works on x86 devices
 * The advantage is the size of the APK is reduced by about 4MB.
 * Upload all the APKs to the Play Store and people will download
 * the correct one based on the CPU architecture of their device.
 */
def enableSeparateBuildPerCPUArchitecture = true

/**
 * Run Proguard to shrink the Java bytecode in release builds.
 */
def enableProguardInReleaseBuilds = true

/**
 * The preferred build flavor of JavaScriptCore.
 *
 * For example, to use the international variant, you can use:
 * `def jscFlavor = 'org.webkit:android-jsc-intl:+'`
 *
 * The international variant includes ICU i18n library and necessary data
 * allowing to use e.g. `Date.toLocaleString` and `String.localeCompare` that
 * give correct results when using with locales other than en-US.  Note that
 * this variant is about 6MiB larger per architecture than default.
 */
def jscFlavor = 'org.webkit:android-jsc:+'

/**
 * Whether to enable the Hermes VM.
 *
 * This should be set on project.ext.react and mirrored here.  If it is not set
 * on project.ext.react, JavaScript will not be compiled to Hermes Bytecode
 * and the benefits of using Hermes will therefore be sharply reduced.
 */
def enableHermes = project.ext.react.get("enableHermes", false);

/**
 * Architectures to build native code for in debug.
 */
def nativeArchitectures = project.getProperties().get("reactNativeDebugArchitectures")

android {
  ndkVersion rootProject.ext.ndkVersion

  compileSdkVersion rootProject.ext.compileSdkVersion

  defaultConfig {
    applicationId "mx.moneyya.loan"
    minSdkVersion rootProject.ext.minSdkVersion
    targetSdkVersion rootProject.ext.targetSdkVersion
    versionCode getVersionCode()
    versionName getVersionName()
    ndk {
      abiFilters "arm64-v8a"
//      , "x86"
    }
    manifestPlaceholders = [
      JPUSH_APPKEY: "6408dd8e8d0aab671711da45",         //在此替换你的APPKey
      JPUSH_CHANNEL: "developer-default"        //在此替换你的channel
    ]
  }
  splits {
    abi {
      enable enableSeparateBuildPerCPUArchitecture
      reset()
      universalApk false  // If true, also generate a universal APK
//      include "arm64-v8a" // "armeabi-v7a", "x86", "arm64-v8a", "x86_64"
    }
  }
  def taskName = getGradle().getStartParameter().getTaskRequests().toString()
  packagingOptions {
    pickFirst '**/*.so'
    // For Hermes, delete all the libjsc* files
    exclude "**/libjsc*.so"
    if (taskName.contains("InternalDebug")) {
      // Release libs take precedence and must be removed
      // to allow debugging
      exclude '**/libhermes-executor-release.so'
    } else {
      // Reduce size by deleting the debugger/inspector TODO
//      exclude '**/libhermes-inspector.so'
//      exclude '**/libhermes-executor-debug.so'
//      exclude '**/libhermes-executor-common-debug.so'
    }
  }
  signingConfigs {
    release {
      if (project.hasProperty('RELEASE_STORE_FILE')) {
        storeFile file(RELEASE_STORE_FILE)
        storePassword RELEASE_STORE_PASSWORD
        keyAlias RELEASE_KEY_ALIAS
        keyPassword RELEASE_KEY_PASSWORD
      }
    }
  }
  buildTypes {
    debug {
      if (nativeArchitectures) {
        ndk {
          abiFilters nativeArchitectures.split(',')
        }
      }
      applicationIdSuffix ".debug"
      versionNameSuffix '-Debug'
      debuggable true
      buildConfigField "String", "ENVIRONMENT", "\"development\""
      buildConfigField("String", "BUILD_TIME", "\"" + System.currentTimeMillis().toString()+"\"" )
      resValue "string", "app_name", "MoneyYa debug"
    }
    release {
      // Caution! In production, you need to generate your own keystore file.
      // see https://reactnative.dev/docs/signed-apk-android.
      resValue "string", "app_name", "MoneyYa"
      debuggable false
      shrinkResources true
      signingConfig signingConfigs.release
      buildConfigField "String", "ENVIRONMENT", "\"production\""
      buildConfigField("String", "BUILD_TIME",  "\"" + System.currentTimeMillis().toString()+"\"" )
      minifyEnabled enableProguardInReleaseBuilds
      proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
    }
  }

  // applicationVariants are e.g. debug, release
  applicationVariants.all { variant ->
    variant.outputs.each { output ->
      // For each separate APK per architecture, set a unique version code as described here:
      // https://developer.android.com/studio/build/configure-apk-splits.html
      output.versionNameOverride = getVersionName()
      output.versionCodeOverride = getVersionCode()
      if (variant.buildType.name =='debug'){
        output.outputFileName = "app-${variant.buildType.name}.apk"
      }else {
        output.outputFileName = "MoneyYa_${variant.buildType.name}_v${getVersionName()}-No.${getVersionCode()}_${getHash()}.apk"
      }
    }
  }
}

repositories {
  flatDir {
    dirs project(':liveness').file('libs')
  }
}

dependencies {
  implementation fileTree(dir: "libs", include: ["*.jar"])
  //noinspection GradleDynamicVersion
  implementation "com.facebook.react:react-native:+"  // From node_modules

  implementation "androidx.swiperefreshlayout:swiperefreshlayout:1.1.0"
  implementation 'com.facebook.fresco:webpsupport:2.5.0'
  implementation project(':react-native-splash-screen')
  implementation project(':react-native-advertising-id')
  implementation project(":liveness")
  implementation project(":liveness_rn")
  implementation project(':jpush-react-native')  // 添加 jpush 依赖
  implementation project(':jcore-react-native')  // 添加 jcore 依赖
  debugImplementation("com.facebook.flipper:flipper:${FLIPPER_VERSION}") {
    exclude group: 'com.facebook.fbjni'
  }
  debugImplementation("com.facebook.flipper:flipper-network-plugin:${FLIPPER_VERSION}") {
    exclude group: 'com.facebook.flipper'
    exclude group: 'com.squareup.okhttp3', module: 'okhttp'
  }

  debugImplementation("com.facebook.flipper:flipper-fresco-plugin:${FLIPPER_VERSION}") {
    exclude group: 'com.facebook.flipper'
  }

  if (enableHermes) {
    def hermesPath = "../../node_modules/hermes-engine/android/";
    debugImplementation files(hermesPath + "hermes-debug.aar")
    releaseImplementation files(hermesPath + "hermes-release.aar")

  } else {
    implementation jscFlavor
  }
}

// Run this once to be able to run the application with BUCK
// puts all compile dependencies into folder libs for BUCK to use
task copyDownloadableDepsToLibs(type: Copy) {
  from configurations.implementation
  into 'libs'
}

apply from: file("../../node_modules/@react-native-community/cli-platform-android/native_modules.gradle"); applyNativeModulesAppBuildGradle(project)

static def getVersionCode() {
  def name = getVersionName()
  def (_major, _minor, _patch) = name.tokenize( '.' )
  int major = _major as int
  int minor = _minor as int
  int patch = _patch as int
  return  major + minor + patch
}
static def getTime(){
  def date = new Date()
  def sdf = new SimpleDateFormat("MM-DD HH-mm-ss")
  return sdf.format(date)
}
static def getVersionName() {
  def jsonSlurper = new JsonSlurper()
  return jsonSlurper.parse(new File('../package.json'))['version']
}
static def getHash() {
  def content = new File('../.hash').text
  return content.trim()
}